class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        
        int closest = 10000;
        
        for (int i = 0; i < nums.size()-2; i++) {
            for (int j = i + 1; j < nums.size()-1; j++) {
                for (int k = j + 1; k < nums.size(); k++) {
                    int temp = nums[i] + nums[j] + nums[k];
                    if (abs(target - temp) < abs(target - closest)) {
                        closest = temp;
                        cout << closest << endl;
                    }
                }
            }
        }
        return closest;
        
    }
};
SLOW AF: O(N^3)

class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        int closest = 10000;
        for (int i = 0; i < nums.size() -2; i++) {
            int i2 = i + 1, i3 = nums.size() - 1;
            while (i2 < i3) {
                int temp = nums[i] + nums[i2] + nums[i3];
                if (temp == target) return target;
                if (abs(target-temp) < abs(target-closest)) closest = temp;
                if (temp > target) i3--;
                else if (temp < target) i2++;
            }
        }
        return closest;
        
    }
};
O(N^2)
