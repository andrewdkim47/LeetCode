Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

We want to use DFS recursively. 
1.) create a helper function that takes in candidates, starting index, target, 2d vector of answer, and vector of our chosen values.
2.) this helper function should loop through from 0 to target inclusive while curr index * candidates[start index].
3.) in this loop we recursively call helper, where we go increment start index, and pass in a new target value of target - the currindex * candidates[start_index}.
4.) then we push candidates[start_idx] into chosen.
5.) we then set chosen as back to what it was. 
6.) base case is when start idx == candidates.size() and if target == 0 then we push chosen into ans.

class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int> selected;
        DFS(candidates, target, ans, selected, 0);
        return ans;
    }
    
        void DFS(vector<int> &candidates, int target, vector<vector<int>> &ans, vector<int> &selected, int start_index) {
        if (start_index == candidates.size()) { //if 
            if (target == 0) {
                ans.push_back(selected);
            }
        }
        else {
            vector<int> original_selected = selected;
            for (int i = 0; i * candidates[start_index] <= target; i++) {
                DFS(candidates, target - i * candidates[start_index], ans, selected, start_index + 1);
                selected.push_back(candidates[start_index]);
            }
            selected = original_selected;
        }
    }
};
