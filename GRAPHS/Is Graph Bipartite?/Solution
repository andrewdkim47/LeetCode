https://leetcode.com/problems/is-graph-bipartite/

Given an undirected graph, return true if and only if it is bipartite.

Recall that a graph is bipartite if we can split it's set of nodes into two independent subsets A and B such that every edge in the graph has one node in A and another node in B.

what we want to do is traverse every node using BFS or DFS, and then we color each sucessive node, and if there a node with the same color next to it we return false.

class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) {
        vector<int> colorBoard(graph.size(), 0);
        queue<int> q;
        for (int i = 0; i < graph.size(); i++) {
            if (colorBoard[i] != 0) continue;
            q.push(i);
            colorBoard[i] = 1;
            while(!q.empty()) {
                int currNode = q.front();
                for (int j = 0; j < graph[currNode].size(); j++) {
                    if (colorBoard[graph[currNode][j]] == colorBoard[currNode]) return false; //adjacent nodes should not have same number on colorboard.
                    if (colorBoard[graph[currNode][j]] == 0) {
                        colorBoard[graph[currNode][j]] = 3 - colorBoard[currNode];
                        q.push(graph[currNode][j]);
                    }
                }
                q.pop();
            }
       }
       return true;
    }
};
